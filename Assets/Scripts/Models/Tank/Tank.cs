using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using TankArena.Models.Tank.Weapons;
using TankArena.Utils;

namespace TankArena.Models.Tank
{
    /// <summary>
    /// Central access to tank features for the player controller
    /// </summary>
    class Tank
    {

        private TankChassis tankChassis;
        private TankTurret tankTurret;

        public Tank(TankChassis chassis, TankTurret turret)
        {
            this.tankChassis = chassis;
            this.tankTurret = turret;
        }

        /// <summary>
        /// Issued command for tank to fire from selected groups
        /// </summary>
        /// <param name="selectedGroups">selected weapon groups</param>
        public void Fire(WeaponGroups selectedGroups)
        {
            tankTurret.Fire(selectedGroups);
        }

        /// <summary>
        /// Tank is being damaged. Nature of the attack will determine by how much and in what areas
        /// </summary>
        /// <param name="damager"></param>
        public void TakeDamage(GameObject damager)
        {
            //resolve what parts get damaged and how much based on who is doing the damaging
        }

        /// <summary>
        /// Issued move command to tank
        /// </summary>
        public void Move()
        {
            
        }

        /// <summary>
        /// Constructs a tank model from the specified code. these codes tak the form of 
        /// key1=value1;key2=value2;key3=value3;, where key represents a tank component,
        /// such as turret, tracks, engine, etc. and value represents their entity codes, avaialbel in the 
        /// EntitesStore
        /// These complete tank codes are also generated by the ToCode() instance method on
        /// a per-tank basis for future storage
        /// </summary>
        /// <param name="tankCode"></param>
        /// <returns></returns>
        public static Tank FromCode(string tankCode)
        {

            //create code ditionary where weapon slots are separate keys like tank parts
            var dictionary = tankCode.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
                             .Select(component => component.Split('='))
                             .ToDictionary(split => split[0], split => split[1]);

            //var tankChassis = EntitiesStore.Instance.Entities[dictionary[SK.SK_TANK_CHASSIS]];

            throw new Exception();
        }

        public String ToCode()
        {
            StringBuilder codeBuilder = new StringBuilder();

            codeBuilder.Append(EntitySerializer.SerializeEntity(tankChassis))
                .Append(";");
            codeBuilder.Append(EntitySerializer.SerializeEntity(tankTurret))
                .Append(";");

            return codeBuilder.ToString();
        }
    }
}